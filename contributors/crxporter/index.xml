<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>crxporter on</title><link>https://nrchkb.github.io/contributors/crxporter/</link><description>Recent content in crxporter on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 03 Aug 2021 00:00:00 +0200</lastBuildDate><atom:link href="https://nrchkb.github.io/contributors/crxporter/index.xml" rel="self" type="application/rss+xml"/><item><title>Wait For Setup</title><link>https://nrchkb.github.io/wiki/introduction/wait-for-setup/</link><pubDate>Tue, 03 Aug 2021 00:00:00 +0200</pubDate><guid>https://nrchkb.github.io/wiki/introduction/wait-for-setup/</guid><description>Wait For Setup feature allows to perform actual accessory configuration in bridge on incoming Setup Message.
Setup Message structure is:
{ &amp;#34;nrchkb&amp;#34;: { &amp;#34;setup&amp;#34;: { ... setup properties goes here } } } In the setup part you may specify properties to configure accessory, such as name, model, manufacturer and other properties available on homekit node.
To configure accessory characteristics setup should contain characteristicProperties string JSON representation for Characteristics Properties as seen in homekit node properties page.</description></item><item><title>Credits</title><link>https://nrchkb.github.io/wiki/discover-more/credits/</link><pubDate>Tue, 03 Aug 2021 00:00:00 +0200</pubDate><guid>https://nrchkb.github.io/wiki/discover-more/credits/</guid><description>This is a place where would like to thank those who have come before to build the work that we have added to.
Where the Project came from The API work to interact between HomeKit and NodeJS is from HAP-NodeJS.
Marius Schmeding made the first version of the Node-RED plugin to use HAP-NodeJS. His work was later forked by Oliver Rahner who put in a good effort to move over to bridged connections to HomeKit.</description></item><item><title>Air Purifier</title><link>https://nrchkb.github.io/wiki/service/air-purifier/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/air-purifier/</guid><description>Possible combinations The display in the Home.app on iOS/macOS depends on the pair of values sent to the Characteristics Active and CurrentAirPurifierState. This table shows each of the 6 possible combinations of these two properties along with what the Home.app display will show. In order to have the Home.app display properly, it is important to send the correct pair of values to the HomeKit service node.
The node will output {&amp;quot;Active&amp;quot;:1} or {&amp;quot;Active&amp;quot;:0} when the user switches the purifier on and off.</description></item><item><title>Camera RTPStream Management</title><link>https://nrchkb.github.io/wiki/service/camera-rtpstream-management/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/camera-rtpstream-management/</guid><description>Notes on Cameras Cameras are a complicated situation. If you are running the Docker way then FFMPEG will be preinstalled for you with several of the options preset (may not have all hardware accelerations built). Alternately you can download and compile your own version of FFMPEG with the build flags you need for your cameras.
For those writing examples, please include how you have installed FFMPEG!
It is recommended to add only one camera per bridge.</description></item><item><title>Carbon Dioxide Sensor</title><link>https://nrchkb.github.io/wiki/service/carbon-dioxide-sensor/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/carbon-dioxide-sensor/</guid><description>Example These examples are meant to be copied into your Node-RED system and adapted to your setup.
Please note: Different from other HomeKit services (e.g. temperature sensor) the Home.app is not showing the carbon dioxide level on the device icon. To view the current value you have to open the preferences of the device in the Home.app. This works as designed by Apple and can&amp;rsquo;t be changed with characteristics properties.</description></item><item><title>Carbon Monoxide Sensor</title><link>https://nrchkb.github.io/wiki/service/carbon-monoxide-sensor/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/carbon-monoxide-sensor/</guid><description>To have a carbon monoxide sensor appear in the Home.app, the CarbonMonoxide service is used. Required value is CarbonMonoxideDetected, there will be a simple example and detailed example included below. Characteristic Properties are not needed for this setup, the values will be updated in the Home.app based on what is being sent from your sensors.
Example These examples are meant to be copied into your Node-RED system and adapted to your setup.</description></item><item><title>Fanv2</title><link>https://nrchkb.github.io/wiki/service/fanv2/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/fanv2/</guid><description>If you would like to have all features, use this in Characteristic Properties:
{ &amp;#34;SwingMode&amp;#34;:true, &amp;#34;RotationDirection&amp;#34;:true, &amp;#34;RotationSpeed&amp;#34;:true } If you would like to limit the rotation speed to 4 speeds, use the following in your Characteristic Properties field:
{ &amp;#34;SwingMode&amp;#34;:true, &amp;#34;RotationSpeed&amp;#34;:{ &amp;#34;minValue&amp;#34;: 0, &amp;#34;maxValue&amp;#34;: 100, &amp;#34;minStep&amp;#34;:25 }, &amp;#34;RotationDirection&amp;#34;:true } Examples These examples are meant to be copied into your Node-RED system and adapted to your setup.
Full Featured fan This is an example of a fan with rotation speed range from 0 to 100, changeable rotation direction, and oscillate feature.</description></item><item><title>Occupancy Sensor</title><link>https://nrchkb.github.io/wiki/service/occupancy-sensor/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/occupancy-sensor/</guid><description>Example These examples are meant to be copied into your Node-RED system and adapted to your setup.
Simple Presence Sensor This example is a very simple occupancy sensor without any other functionality:
It de-/activates only the Occupancy sensor in the Home.app and set the StatusActive to true anytime: Here is the sample code:
[{&amp;#34;id&amp;#34;:&amp;#34;491167d6.3b9688&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;change&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1ac5f8da.58656f&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;Set payload to HkMsg for presence&amp;#34;,&amp;#34;rules&amp;#34;:[{&amp;#34;t&amp;#34;:&amp;#34;move&amp;#34;,&amp;#34;p&amp;#34;:&amp;#34;payload&amp;#34;,&amp;#34;pt&amp;#34;:&amp;#34;msg&amp;#34;,&amp;#34;to&amp;#34;:&amp;#34;payload.OccupancyDetected&amp;#34;,&amp;#34;tot&amp;#34;:&amp;#34;msg&amp;#34;},{&amp;#34;t&amp;#34;:&amp;#34;set&amp;#34;,&amp;#34;p&amp;#34;:&amp;#34;payload.StatusActive&amp;#34;,&amp;#34;pt&amp;#34;:&amp;#34;msg&amp;#34;,&amp;#34;to&amp;#34;:&amp;#34;true&amp;#34;,&amp;#34;tot&amp;#34;:&amp;#34;bool&amp;#34;}],&amp;#34;action&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;property&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;from&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;to&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;reg&amp;#34;:false,&amp;#34;x&amp;#34;:1440,&amp;#34;y&amp;#34;:360,&amp;#34;wires&amp;#34;:[[&amp;#34;7712393a.469f98&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;7712393a.469f98&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;homekit-service&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1ac5f8da.58656f&amp;#34;,&amp;#34;isParent&amp;#34;:true,&amp;#34;bridge&amp;#34;:&amp;#34;890aedc6.d0b418&amp;#34;,&amp;#34;parentService&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;RBRx@Home&amp;#34;,&amp;#34;serviceName&amp;#34;:&amp;#34;OccupancySensor&amp;#34;,&amp;#34;topic&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;filter&amp;#34;:false,&amp;#34;manufacturer&amp;#34;:&amp;#34;Default Manufacturer&amp;#34;,&amp;#34;model&amp;#34;:&amp;#34;Default Model&amp;#34;,&amp;#34;serialNo&amp;#34;:&amp;#34;Default Serial Number&amp;#34;,&amp;#34;characteristicProperties&amp;#34;:&amp;#34;{\n \&amp;#34;OccupancyDetected\&amp;#34; : 0,\n \&amp;#34;StatusActive\&amp;#34; : false\n}&amp;#34;,&amp;#34;x&amp;#34;:1760,&amp;#34;y&amp;#34;:360,&amp;#34;wires&amp;#34;:[[]]},{&amp;#34;id&amp;#34;:&amp;#34;14d9e017.35bd28&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;inject&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1ac5f8da.58656f&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;topic&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payload&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;payloadType&amp;#34;:&amp;#34;num&amp;#34;,&amp;#34;repeat&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;crontab&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;once&amp;#34;:false,&amp;#34;onceDelay&amp;#34;:0.1,&amp;#34;x&amp;#34;:1230,&amp;#34;y&amp;#34;:320,&amp;#34;wires&amp;#34;:[[&amp;#34;491167d6.3b9688&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;56f0d08b.2afce8&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;inject&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1ac5f8da.58656f&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;topic&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payload&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;payloadType&amp;#34;:&amp;#34;num&amp;#34;,&amp;#34;repeat&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;crontab&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;once&amp;#34;:false,&amp;#34;onceDelay&amp;#34;:0.1,&amp;#34;x&amp;#34;:1230,&amp;#34;y&amp;#34;:400,&amp;#34;wires&amp;#34;:[[&amp;#34;491167d6.3b9688&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;890aedc6.d0b418&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;homekit-bridge&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;bridgeName&amp;#34;:&amp;#34;Node-Red-HAP-Bridge-02&amp;#34;,&amp;#34;pinCode&amp;#34;:&amp;#34;222-22-222&amp;#34;,&amp;#34;port&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;allowInsecureRequest&amp;#34;:false,&amp;#34;manufacturer&amp;#34;:&amp;#34;Default Manufacturer&amp;#34;,&amp;#34;model&amp;#34;:&amp;#34;Default Model&amp;#34;,&amp;#34;serialNo&amp;#34;:&amp;#34;Default Serial Number&amp;#34;}] The Author is using a more comprehensive flow for a use case that is also a simple presence detection of a device.</description></item><item><title>Security System</title><link>https://nrchkb.github.io/wiki/service/security-system/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/security-system/</guid><description>Example This example uses node-red-contrib-alarm as an &amp;ldquo;alarm panel&amp;rdquo;. Many thanks for the devs over there!
The most basic parts are triggers going into alarm nodes and state changes coming to/from HomeKit. I have added in some handling of arming and disarming based on who is home and time of day (automatic arming at night or when we leave home). I am using MQTT for most of my triggers.
Finally, I have an &amp;ldquo;Alarm Noise&amp;rdquo; HomeKit node, this is a StatelessProgrammableSwitch which is set in the Home.</description></item><item><title>Stateless Programmable Switch</title><link>https://nrchkb.github.io/wiki/service/stateless-programmable-switch/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/stateless-programmable-switch/</guid><description>Examples These examples are meant to be copied into your Node-RED system and adapted to your setup.
Single Button This example is a single button with 3 press options: &amp;ldquo;Single Press&amp;rdquo;, &amp;ldquo;Double Press&amp;rdquo;, or &amp;ldquo;Long Press&amp;rdquo;. Each of these can be set in the Home.app to set a scene. Note the scene settings for these buttons is done from within the button settings in the Home.app rather than the automation screen.</description></item></channel></rss>