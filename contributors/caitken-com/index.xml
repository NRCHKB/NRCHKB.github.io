<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>caitken-com on</title><link>https://nrchkb.github.io/contributors/caitken-com/</link><description>Recent content in caitken-com on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 17 Apr 2021 18:50:12 +0000</lastBuildDate><atom:link href="https://nrchkb.github.io/contributors/caitken-com/index.xml" rel="self" type="application/rss+xml"/><item><title>Characteristics</title><link>https://nrchkb.github.io/wiki/introduction/characteristics/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0200</pubDate><guid>https://nrchkb.github.io/wiki/introduction/characteristics/</guid><description>Characteristics are the values sent to the service item. They are generally true/false or number values. All services have at least one required characteristic. For example the switch has only the required characteristic of On.
Characteristic Properties The HomeKit service node has a section called &amp;ldquo;Characteristic Properties&amp;rdquo;. This section is used to define limits or initialize which characteristics you may send to your specific item.
The characteristic properties do not set any value in the item, instead they tell HomeKit that the item will be using that characteristic and define limits on the valid values.</description></item><item><title>Camera Control</title><link>https://nrchkb.github.io/wiki/service/camera-control/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/camera-control/</guid><description>Notes on Cameras Cameras are a complicated situation. If you are running the Docker way then FFMPEG will be preinstalled for you with several of the options preset (may not have all hardware accelerations built). Alternately you can download and compile your own version of FFMPEG with the build flags you need for your cameras.
For those writing examples, please include how you have installed FFMPEG!
It is recommended to add only one camera per bridge.</description></item><item><title>Carbon Dioxide Sensor</title><link>https://nrchkb.github.io/wiki/service/carbon-dioxide-sensor/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/carbon-dioxide-sensor/</guid><description>Example These examples are meant to be copied into your Node-RED system and adapted to your setup.
Please note: Different from other HomeKit services (e.g. temperature sensor) the Home.app is not showing the carbon dioxide level on the device icon. To view the current value you have to open the preferences of the device in the Home.app. This works as designed by Apple and can&amp;rsquo;t be changed with characteristics properties.</description></item><item><title>Carbon Monoxide Sensor</title><link>https://nrchkb.github.io/wiki/service/carbon-monoxide-sensor/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/carbon-monoxide-sensor/</guid><description>To have a carbon monoxide sensor appear in the Home.app, the CarbonMonoxide service is used. Required value is CarbonMonoxideDetected, there will be a simple example and detailed example included below. Characteristic Properties are not needed for this setup, the values will be updated in the Home.app based on what is being sent from your sensors.
Example These examples are meant to be copied into your Node-RED system and adapted to your setup.</description></item><item><title>Fanv2</title><link>https://nrchkb.github.io/wiki/service/fanv2/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/fanv2/</guid><description>If you would like to have all features, use this in Characteristic Properties:
{ &amp;quot;SwingMode&amp;quot;:true, &amp;quot;RotationDirection&amp;quot;:true, &amp;quot;RotationSpeed&amp;quot;:true } If you would like to limit the rotation speed to 4 speeds, use the following in your Characteristic Properties field:
{ &amp;quot;SwingMode&amp;quot;:true, &amp;quot;RotationSpeed&amp;quot;:{ &amp;quot;minValue&amp;quot;: 0, &amp;quot;maxValue&amp;quot;: 100, &amp;quot;minStep&amp;quot;:25 }, &amp;quot;RotationDirection&amp;quot;:true } Examples These examples are meant to be copied into your Node-RED system and adapted to your setup.
Full Featured fan This is an example of a fan with rotation speed range from 0 to 100, changeable rotation direction, and oscillate feature.</description></item><item><title>Garage Door Opener</title><link>https://nrchkb.github.io/wiki/service/garage-door-opener/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/garage-door-opener/</guid><description>Synopsis Garage door is dangerous because it can lock you inside or damage your car. That&amp;rsquo;s why it is a good idea to have at least 3 sensors:
Door fully opened Door fully closed Obstruction sensor Motion sensor or button inside to open it manually also is optional.
Examples Garage door with initial state and simple open/close logics. [{&amp;quot;id&amp;quot;:&amp;quot;5534366a.7ef91&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;homekit-service&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;75848247.7201a4&amp;quot;,&amp;quot;isParent&amp;quot;:true,&amp;quot;bridge&amp;quot;:&amp;quot;1f4da0a9.4023c7&amp;quot;,&amp;quot;parentService&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Garage Door&amp;quot;,&amp;quot;serviceName&amp;quot;:&amp;quot;GarageDoorOpener&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;filter&amp;quot;:false,&amp;quot;manufacturer&amp;quot;:&amp;quot;ptath&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;Default Model&amp;quot;,&amp;quot;serialNo&amp;quot;:&amp;quot;0001&amp;quot;,&amp;quot;characteristicProperties&amp;quot;:&amp;quot;{\n \&amp;quot;CurrentDoorState\&amp;quot;:1\n}&amp;quot;,&amp;quot;x&amp;quot;:518,&amp;quot;y&amp;quot;:256,&amp;quot;wires&amp;quot;:[[&amp;quot;14d4bf27.4db229&amp;quot;,&amp;quot;745cd5b8.149d1c&amp;quot;,&amp;quot;d12ee2b5.67db6&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;14d4bf27.4db229&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;debug&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;75848247.7201a4&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;active&amp;quot;:true,&amp;quot;tosidebar&amp;quot;:true,&amp;quot;console&amp;quot;:false,&amp;quot;tostatus&amp;quot;:false,&amp;quot;complete&amp;quot;:&amp;quot;false&amp;quot;,&amp;quot;x&amp;quot;:894,&amp;quot;y&amp;quot;:256,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;f0a87280.f66ea&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;inject&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;75848247.7201a4&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;TargetDoorState 0 To Open&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payload&amp;quot;:&amp;quot;{\&amp;quot;TargetDoorState\&amp;quot;: 0}&amp;quot;,&amp;quot;payloadType&amp;quot;:&amp;quot;json&amp;quot;,&amp;quot;repeat&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;crontab&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;once&amp;quot;:false,&amp;quot;onceDelay&amp;quot;:0.1,&amp;quot;x&amp;quot;:142,&amp;quot;y&amp;quot;:40,&amp;quot;wires&amp;quot;:[[&amp;quot;5534366a.7ef91&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;2f0bb109.cee4ee&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;inject&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;75848247.7201a4&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;TargetDoorState 1 To Close&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payload&amp;quot;:&amp;quot;{\&amp;quot;TargetDoorState\&amp;quot;:1}&amp;quot;,&amp;quot;payloadType&amp;quot;:&amp;quot;json&amp;quot;,&amp;quot;repeat&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;crontab&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;once&amp;quot;:false,&amp;quot;onceDelay&amp;quot;:0.</description></item><item><title>Heater Cooler</title><link>https://nrchkb.github.io/wiki/service/heater-cooler/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/heater-cooler/</guid><description>Used as an Air Conditioner accessory with 3 modes: Auto, Heat, Cool. Optionally able to control fan speed and enable fan swing mode.</description></item><item><title>Humidifier Dehumidifier</title><link>https://nrchkb.github.io/wiki/service/humidifier-dehumidifier/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/humidifier-dehumidifier/</guid><description>Used as a Humidifier/Dehumidifier accessory with 3 modes: Auto, Humidifying, Dehumidifying. Optionally able to control fan speed and enable fan swing mode.</description></item><item><title>Irrigation System</title><link>https://nrchkb.github.io/wiki/service/irrigation-system/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/irrigation-system/</guid><description>Used as an Irrigation accessory with program scheduling and manual mode. This service is meant to be used with a full external irrigation controller which could be some piece of hardware (rachio, skydrop, orbit, etc), it could be an open source setup (OpenSprinkler is good), or it could be simply a set of flows which is controlling your irrigation system. Note that from Home.app it is not possible to make a schedule, it is not possible to enable/disable a schedule, and it is not possible to start a manual schedule.</description></item><item><title>Occupancy Sensor</title><link>https://nrchkb.github.io/wiki/service/occupancy-sensor/</link><pubDate>Sat, 17 Apr 2021 18:50:12 +0000</pubDate><guid>https://nrchkb.github.io/wiki/service/occupancy-sensor/</guid><description>Example These examples are meant to be copied into your Node-RED system and adapted to your setup.
Simple Presence Sensor This example is a very simple occupancy sensor without any other functionality:
It de-/activates only the Occupancy sensor in the Home.app and set the StatusActive to true anytime: Here is the sample code:
[{&amp;quot;id&amp;quot;:&amp;quot;491167d6.3b9688&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;change&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1ac5f8da.58656f&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Set payload to HkMsg for presence&amp;quot;,&amp;quot;rules&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;move&amp;quot;,&amp;quot;p&amp;quot;:&amp;quot;payload&amp;quot;,&amp;quot;pt&amp;quot;:&amp;quot;msg&amp;quot;,&amp;quot;to&amp;quot;:&amp;quot;payload.OccupancyDetected&amp;quot;,&amp;quot;tot&amp;quot;:&amp;quot;msg&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;set&amp;quot;,&amp;quot;p&amp;quot;:&amp;quot;payload.StatusActive&amp;quot;,&amp;quot;pt&amp;quot;:&amp;quot;msg&amp;quot;,&amp;quot;to&amp;quot;:&amp;quot;true&amp;quot;,&amp;quot;tot&amp;quot;:&amp;quot;bool&amp;quot;}],&amp;quot;action&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;property&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;from&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;to&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;reg&amp;quot;:false,&amp;quot;x&amp;quot;:1440,&amp;quot;y&amp;quot;:360,&amp;quot;wires&amp;quot;:[[&amp;quot;7712393a.469f98&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;7712393a.469f98&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;homekit-service&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1ac5f8da.58656f&amp;quot;,&amp;quot;isParent&amp;quot;:true,&amp;quot;bridge&amp;quot;:&amp;quot;890aedc6.d0b418&amp;quot;,&amp;quot;parentService&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;RBRx@Home&amp;quot;,&amp;quot;serviceName&amp;quot;:&amp;quot;OccupancySensor&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;filter&amp;quot;:false,&amp;quot;manufacturer&amp;quot;:&amp;quot;Default Manufacturer&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;Default Model&amp;quot;,&amp;quot;serialNo&amp;quot;:&amp;quot;Default Serial Number&amp;quot;,&amp;quot;characteristicProperties&amp;quot;:&amp;quot;{\n \&amp;quot;OccupancyDetected\&amp;quot; : 0,\n \&amp;quot;StatusActive\&amp;quot; : false\n}&amp;quot;,&amp;quot;x&amp;quot;:1760,&amp;quot;y&amp;quot;:360,&amp;quot;wires&amp;quot;:[[]]},{&amp;quot;id&amp;quot;:&amp;quot;14d9e017.35bd28&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;inject&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1ac5f8da.58656f&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payload&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;payloadType&amp;quot;:&amp;quot;num&amp;quot;,&amp;quot;repeat&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;crontab&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;once&amp;quot;:false,&amp;quot;onceDelay&amp;quot;:0.1,&amp;quot;x&amp;quot;:1230,&amp;quot;y&amp;quot;:320,&amp;quot;wires&amp;quot;:[[&amp;quot;491167d6.3b9688&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;56f0d08b.2afce8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;inject&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1ac5f8da.58656f&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payload&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;payloadType&amp;quot;:&amp;quot;num&amp;quot;,&amp;quot;repeat&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;crontab&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;once&amp;quot;:false,&amp;quot;onceDelay&amp;quot;:0.1,&amp;quot;x&amp;quot;:1230,&amp;quot;y&amp;quot;:400,&amp;quot;wires&amp;quot;:[[&amp;quot;491167d6.3b9688&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;890aedc6.d0b418&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;homekit-bridge&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;bridgeName&amp;quot;:&amp;quot;Node-Red-HAP-Bridge-02&amp;quot;,&amp;quot;pinCode&amp;quot;:&amp;quot;222-22-222&amp;quot;,&amp;quot;port&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;allowInsecureRequest&amp;quot;:false,&amp;quot;manufacturer&amp;quot;:&amp;quot;Default Manufacturer&amp;quot;,&amp;quot;model&amp;quot;:&amp;quot;Default Model&amp;quot;,&amp;quot;serialNo&amp;quot;:&amp;quot;Default Serial Number&amp;quot;}] The Author is using a more comprehensive flow for a use case that is also a simple presence detection of a device.</description></item></channel></rss>